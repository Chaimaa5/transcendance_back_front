generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Achievement{
  id Int @default(autoincrement())@id
  Achievement String
  Achieved    Boolean
  userId String
  user User? @relation("Achieved", fields: [userId], references: [id])
}
model User {
  id            String                  @id
  username      String                  @unique
  fullname      String
  avatar        String
  isTwoFacEnabled  Boolean
  TwoFacSecret     String
  XP            Int
  level         Float?
  topaz         Int?
  win           Int
  loss          Int
  games         Int?
  rank          Int
  refreshToken  String?
  status        Boolean
  badge         Achievement[]       @relation("Achieved")
  createdAt     DateTime             @default(now())
  sentFriendships   Friendship[]     @relation("SenderUser") 
  rooms             Room[]  @relation("Ownership")
  receivedFriendships   Friendship[] @relation("ReceiverUser")
  groupMembership GroupMembership[]  @relation("UserMembership")
  message       Message[]            @relation("MessageToUser")
  Player1   Game[]     @relation("Player1InGame")
  Player2   Game[]   @relation("Player2InGame")
  receivedNot Notification[] @relation("NotifationSender")
  sentNot     Notification[] @relation("NotifationReceiver")
}

model Friendship {
  id            Int                   @default(autoincrement()) @id
  sender        User                  @relation("SenderUser", fields: [senderId], references: [id])
  senderId      String
  receiver      User                  @relation("ReceiverUser", fields: [receiverId], references: [id])
  receiverId    String   
  status        String
  blockerId     String
  createdAt     DateTime              @default(now())

}

model GroupMembership {
  id          Int                     @default(autoincrement()) @id
  room        Room                    @relation("GroupToRoom", fields: [roomId], references: [id]) 
  roomId      Int                     
  user        User                    @relation("UserMembership", fields: [userId], references: [id])
  userId      String       
  role        String
  isBanned    Boolean
  isMuted     Boolean
  createdAt   DateTime                @default(now())

}


model  Room {
  id          Int                     @default(autoincrement()) @id
  name        String
  image       String
  isChannel   Boolean
  password    String
  createdAt   DateTime                @default(now())
  updateAt    DateTime                @default(now())
  ownerId     String
  owner       User                      @relation("Ownership", fields: [ownerId], references: [id])
  message     Message[]                @relation("MessagesToRoom")
  membership  GroupMembership[]        @relation("GroupToRoom")
}

model  Message {
  id         Int                      @default(autoincrement()) @id
  room       Room                     @relation("MessagesToRoom", fields: [roomId], references: [id])
  roomId     Int        
  user       User                     @relation("MessageToUser", fields: [userId], references: [id])
  userId     String         
  content    String
  createdAt  DateTime                 @default(now())
}

model  Game {
  id         Int        @default(autoincrement()) @id
  player1    User       @relation("Player1InGame", fields: [playerId1], references: [id])
  playerId1  String          
  player2    User       @relation("Player2InGame", fields: [playerId2], references: [id])
  playerId2  String          
  playerXp1  Int
  playerXp2  Int
  mode       String
  rounds     Int
  winner      String
}

model Notification {
  id          Int @default(autoincrement()) @id 
  type        String
  status      String
  sender      User        @relation("NotifationSender", fields:  [senderId], references:  [id])
  senderId    String
  receiver    User        @relation("NotifationReceiver", fields:  [receiverId], references:  [id])
  receiverId  String
  content     String
   createdAt  DateTime                @default(now())
}